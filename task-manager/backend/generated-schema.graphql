# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Action {
  _count: ActionCount
  id: ID!
  name: Name
  notifications(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  targetId: String!
  targetType: TargetType
  task: Task!
}

type ActionCount {
  notifications: Int!
}

type ActionCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
  targetId: Int!
  targetType: Int!
}

input ActionCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  targetId: SortOrder
  targetType: SortOrder
}

input ActionCreateInput {
  id: String
  name: Name
  notifications: NotificationCreateNestedManyWithoutActionsInput
  targetType: TargetType
  task: TaskCreateNestedOneWithoutActionsInput!
}

input ActionCreateManyInput {
  id: String
  name: Name
  targetId: String!
  targetType: TargetType
}

input ActionCreateManyTaskInput {
  id: String
  name: Name
  targetType: TargetType
}

input ActionCreateManyTaskInputEnvelope {
  data: [ActionCreateManyTaskInput!]!
  skipDuplicates: Boolean
}

input ActionCreateNestedManyWithoutTaskInput {
  connect: [ActionWhereUniqueInput!]
  connectOrCreate: [ActionCreateOrConnectWithoutTaskInput!]
  create: [ActionCreateWithoutTaskInput!]
  createMany: ActionCreateManyTaskInputEnvelope
}

input ActionCreateNestedOneWithoutNotificationsInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutNotificationsInput
  create: ActionCreateWithoutNotificationsInput
}

input ActionCreateOrConnectWithoutNotificationsInput {
  create: ActionCreateWithoutNotificationsInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateOrConnectWithoutTaskInput {
  create: ActionCreateWithoutTaskInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateWithoutNotificationsInput {
  id: String
  name: Name
  targetType: TargetType
  task: TaskCreateNestedOneWithoutActionsInput!
}

input ActionCreateWithoutTaskInput {
  id: String
  name: Name
  notifications: NotificationCreateNestedManyWithoutActionsInput
  targetType: TargetType
}

type ActionGroupBy {
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
  id: String!
  name: Name
  targetId: String!
  targetType: TargetType
}

input ActionListRelationFilter {
  every: ActionWhereInput
  none: ActionWhereInput
  some: ActionWhereInput
}

type ActionMaxAggregate {
  id: String
  name: Name
  targetId: String
  targetType: TargetType
}

input ActionMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  targetId: SortOrder
  targetType: SortOrder
}

type ActionMinAggregate {
  id: String
  name: Name
  targetId: String
  targetType: TargetType
}

input ActionMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  targetId: SortOrder
  targetType: SortOrder
}

input ActionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActionOrderByWithAggregationInput {
  _count: ActionCountOrderByAggregateInput
  _max: ActionMaxOrderByAggregateInput
  _min: ActionMinOrderByAggregateInput
  id: SortOrder
  name: SortOrder
  targetId: SortOrder
  targetType: SortOrder
}

input ActionOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  notifications: NotificationOrderByRelationAggregateInput
  targetId: SortOrder
  targetType: SortOrder
  task: TaskOrderByWithRelationInput
}

input ActionRelationFilter {
  is: ActionWhereInput
  isNot: ActionWhereInput
}

enum ActionScalarFieldEnum {
  id
  name
  targetId
  targetType
}

input ActionScalarWhereInput {
  AND: [ActionScalarWhereInput!]
  NOT: [ActionScalarWhereInput!]
  OR: [ActionScalarWhereInput!]
  id: StringFilter
  name: EnumNameNullableFilter
  targetId: StringFilter
  targetType: EnumTargetTypeNullableFilter
}

input ActionScalarWhereWithAggregatesInput {
  AND: [ActionScalarWhereWithAggregatesInput!]
  NOT: [ActionScalarWhereWithAggregatesInput!]
  OR: [ActionScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: EnumNameNullableWithAggregatesFilter
  targetId: StringWithAggregatesFilter
  targetType: EnumTargetTypeNullableWithAggregatesFilter
}

input ActionUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: NullableEnumNameFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutActionsNestedInput
  targetType: NullableEnumTargetTypeFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutActionsNestedInput
}

input ActionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: NullableEnumNameFieldUpdateOperationsInput
  targetType: NullableEnumTargetTypeFieldUpdateOperationsInput
}

input ActionUpdateManyWithWhereWithoutTaskInput {
  data: ActionUpdateManyMutationInput!
  where: ActionScalarWhereInput!
}

input ActionUpdateManyWithoutTaskNestedInput {
  connect: [ActionWhereUniqueInput!]
  connectOrCreate: [ActionCreateOrConnectWithoutTaskInput!]
  create: [ActionCreateWithoutTaskInput!]
  createMany: ActionCreateManyTaskInputEnvelope
  delete: [ActionWhereUniqueInput!]
  deleteMany: [ActionScalarWhereInput!]
  disconnect: [ActionWhereUniqueInput!]
  set: [ActionWhereUniqueInput!]
  update: [ActionUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [ActionUpdateManyWithWhereWithoutTaskInput!]
  upsert: [ActionUpsertWithWhereUniqueWithoutTaskInput!]
}

input ActionUpdateOneRequiredWithoutNotificationsNestedInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutNotificationsInput
  create: ActionCreateWithoutNotificationsInput
  update: ActionUpdateWithoutNotificationsInput
  upsert: ActionUpsertWithoutNotificationsInput
}

input ActionUpdateWithWhereUniqueWithoutTaskInput {
  data: ActionUpdateWithoutTaskInput!
  where: ActionWhereUniqueInput!
}

input ActionUpdateWithoutNotificationsInput {
  id: StringFieldUpdateOperationsInput
  name: NullableEnumNameFieldUpdateOperationsInput
  targetType: NullableEnumTargetTypeFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutActionsNestedInput
}

input ActionUpdateWithoutTaskInput {
  id: StringFieldUpdateOperationsInput
  name: NullableEnumNameFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutActionsNestedInput
  targetType: NullableEnumTargetTypeFieldUpdateOperationsInput
}

input ActionUpsertWithWhereUniqueWithoutTaskInput {
  create: ActionCreateWithoutTaskInput!
  update: ActionUpdateWithoutTaskInput!
  where: ActionWhereUniqueInput!
}

input ActionUpsertWithoutNotificationsInput {
  create: ActionCreateWithoutNotificationsInput!
  update: ActionUpdateWithoutNotificationsInput!
}

input ActionWhereInput {
  AND: [ActionWhereInput!]
  NOT: [ActionWhereInput!]
  OR: [ActionWhereInput!]
  id: StringFilter
  name: EnumNameNullableFilter
  notifications: NotificationListRelationFilter
  targetId: StringFilter
  targetType: EnumTargetTypeNullableFilter
  task: TaskRelationFilter
}

input ActionWhereUniqueInput {
  id: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAction {
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
}

type AggregateAssignee {
  _count: AssigneeCountAggregate
  _max: AssigneeMaxAggregate
  _min: AssigneeMinAggregate
}

type AggregateComment {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
}

type AggregateNotification {
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
}

type AggregateTask {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type Assignee {
  id: ID!
  task: Task!
  taskId: String!
  user: User!
  userId: String!
}

type AssigneeCountAggregate {
  _all: Int!
  id: Int!
  taskId: Int!
  userId: Int!
}

input AssigneeCountOrderByAggregateInput {
  id: SortOrder
  taskId: SortOrder
  userId: SortOrder
}

input AssigneeCreateInput {
  id: String
  task: TaskCreateNestedOneWithoutAssigneesInput!
  user: UserCreateNestedOneWithoutAssigneesInput!
}

input AssigneeCreateManyInput {
  id: String
  taskId: String!
  userId: String!
}

input AssigneeCreateManyTaskInput {
  id: String
  userId: String!
}

input AssigneeCreateManyTaskInputEnvelope {
  data: [AssigneeCreateManyTaskInput!]!
  skipDuplicates: Boolean
}

input AssigneeCreateManyUserInput {
  id: String
  taskId: String!
}

input AssigneeCreateManyUserInputEnvelope {
  data: [AssigneeCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AssigneeCreateNestedManyWithoutTaskInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutTaskInput!]
  create: [AssigneeCreateWithoutTaskInput!]
  createMany: AssigneeCreateManyTaskInputEnvelope
}

input AssigneeCreateNestedManyWithoutUserInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutUserInput!]
  create: [AssigneeCreateWithoutUserInput!]
  createMany: AssigneeCreateManyUserInputEnvelope
}

input AssigneeCreateOrConnectWithoutTaskInput {
  create: AssigneeCreateWithoutTaskInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeCreateOrConnectWithoutUserInput {
  create: AssigneeCreateWithoutUserInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeCreateWithoutTaskInput {
  id: String
  user: UserCreateNestedOneWithoutAssigneesInput!
}

input AssigneeCreateWithoutUserInput {
  id: String
  task: TaskCreateNestedOneWithoutAssigneesInput!
}

type AssigneeGroupBy {
  _count: AssigneeCountAggregate
  _max: AssigneeMaxAggregate
  _min: AssigneeMinAggregate
  id: String!
  taskId: String!
  userId: String!
}

input AssigneeListRelationFilter {
  every: AssigneeWhereInput
  none: AssigneeWhereInput
  some: AssigneeWhereInput
}

type AssigneeMaxAggregate {
  id: String
  taskId: String
  userId: String
}

input AssigneeMaxOrderByAggregateInput {
  id: SortOrder
  taskId: SortOrder
  userId: SortOrder
}

type AssigneeMinAggregate {
  id: String
  taskId: String
  userId: String
}

input AssigneeMinOrderByAggregateInput {
  id: SortOrder
  taskId: SortOrder
  userId: SortOrder
}

input AssigneeOrderByRelationAggregateInput {
  _count: SortOrder
}

input AssigneeOrderByWithAggregationInput {
  _count: AssigneeCountOrderByAggregateInput
  _max: AssigneeMaxOrderByAggregateInput
  _min: AssigneeMinOrderByAggregateInput
  id: SortOrder
  taskId: SortOrder
  userId: SortOrder
}

input AssigneeOrderByWithRelationInput {
  id: SortOrder
  task: TaskOrderByWithRelationInput
  taskId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum AssigneeScalarFieldEnum {
  id
  taskId
  userId
}

input AssigneeScalarWhereInput {
  AND: [AssigneeScalarWhereInput!]
  NOT: [AssigneeScalarWhereInput!]
  OR: [AssigneeScalarWhereInput!]
  id: StringFilter
  taskId: StringFilter
  userId: StringFilter
}

input AssigneeScalarWhereWithAggregatesInput {
  AND: [AssigneeScalarWhereWithAggregatesInput!]
  NOT: [AssigneeScalarWhereWithAggregatesInput!]
  OR: [AssigneeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  taskId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input AssigneeUpdateInput {
  id: StringFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutAssigneesNestedInput
  user: UserUpdateOneRequiredWithoutAssigneesNestedInput
}

input AssigneeUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input AssigneeUpdateManyWithWhereWithoutTaskInput {
  data: AssigneeUpdateManyMutationInput!
  where: AssigneeScalarWhereInput!
}

input AssigneeUpdateManyWithWhereWithoutUserInput {
  data: AssigneeUpdateManyMutationInput!
  where: AssigneeScalarWhereInput!
}

input AssigneeUpdateManyWithoutTaskNestedInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutTaskInput!]
  create: [AssigneeCreateWithoutTaskInput!]
  createMany: AssigneeCreateManyTaskInputEnvelope
  delete: [AssigneeWhereUniqueInput!]
  deleteMany: [AssigneeScalarWhereInput!]
  disconnect: [AssigneeWhereUniqueInput!]
  set: [AssigneeWhereUniqueInput!]
  update: [AssigneeUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [AssigneeUpdateManyWithWhereWithoutTaskInput!]
  upsert: [AssigneeUpsertWithWhereUniqueWithoutTaskInput!]
}

input AssigneeUpdateManyWithoutUserNestedInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutUserInput!]
  create: [AssigneeCreateWithoutUserInput!]
  createMany: AssigneeCreateManyUserInputEnvelope
  delete: [AssigneeWhereUniqueInput!]
  deleteMany: [AssigneeScalarWhereInput!]
  disconnect: [AssigneeWhereUniqueInput!]
  set: [AssigneeWhereUniqueInput!]
  update: [AssigneeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AssigneeUpdateManyWithWhereWithoutUserInput!]
  upsert: [AssigneeUpsertWithWhereUniqueWithoutUserInput!]
}

input AssigneeUpdateWithWhereUniqueWithoutTaskInput {
  data: AssigneeUpdateWithoutTaskInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeUpdateWithWhereUniqueWithoutUserInput {
  data: AssigneeUpdateWithoutUserInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeUpdateWithoutTaskInput {
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAssigneesNestedInput
}

input AssigneeUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutAssigneesNestedInput
}

input AssigneeUpsertWithWhereUniqueWithoutTaskInput {
  create: AssigneeCreateWithoutTaskInput!
  update: AssigneeUpdateWithoutTaskInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeUpsertWithWhereUniqueWithoutUserInput {
  create: AssigneeCreateWithoutUserInput!
  update: AssigneeUpdateWithoutUserInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeWhereInput {
  AND: [AssigneeWhereInput!]
  NOT: [AssigneeWhereInput!]
  OR: [AssigneeWhereInput!]
  id: StringFilter
  task: TaskRelationFilter
  taskId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AssigneeWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Comment {
  _count: CommentCount
  children(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  content: String!
  createdAt: DateTime!
  id: ID!
  owner: User
  ownerId: String!
  parent: Comment
  parentId: String
  targetType: TargetType
  task: Task!
  taskId: String!
  updatedAt: DateTime!
}

type CommentCount {
  children: Int!
}

type CommentCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  ownerId: Int!
  parentId: Int!
  targetType: Int!
  taskId: Int!
  updatedAt: Int!
}

input CommentCountOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ownerId: SortOrder
  parentId: SortOrder
  targetType: SortOrder
  taskId: SortOrder
  updatedAt: SortOrder
}

input CommentCreateInput {
  children: CommentCreateNestedManyWithoutParentInput
  content: String!
  createdAt: DateTime
  id: String
  owner: UserCreateNestedOneWithoutCommentsInput
  parent: CommentCreateNestedOneWithoutChildrenInput
  targetType: TargetType
  task: TaskCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateManyInput {
  content: String!
  createdAt: DateTime
  id: String
  ownerId: String!
  parentId: String
  targetType: TargetType
  taskId: String!
  updatedAt: DateTime
}

input CommentCreateManyOwnerInput {
  content: String!
  createdAt: DateTime
  id: String
  parentId: String
  targetType: TargetType
  taskId: String!
  updatedAt: DateTime
}

input CommentCreateManyOwnerInputEnvelope {
  data: [CommentCreateManyOwnerInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyParentInput {
  content: String!
  createdAt: DateTime
  id: String
  ownerId: String!
  targetType: TargetType
  taskId: String!
  updatedAt: DateTime
}

input CommentCreateManyParentInputEnvelope {
  data: [CommentCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyTaskInput {
  content: String!
  createdAt: DateTime
  id: String
  ownerId: String!
  parentId: String
  targetType: TargetType
  updatedAt: DateTime
}

input CommentCreateManyTaskInputEnvelope {
  data: [CommentCreateManyTaskInput!]!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutOwnerInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutOwnerInput!]
  create: [CommentCreateWithoutOwnerInput!]
  createMany: CommentCreateManyOwnerInputEnvelope
}

input CommentCreateNestedManyWithoutParentInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentInput!]
  create: [CommentCreateWithoutParentInput!]
  createMany: CommentCreateManyParentInputEnvelope
}

input CommentCreateNestedManyWithoutTaskInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutTaskInput!]
  create: [CommentCreateWithoutTaskInput!]
  createMany: CommentCreateManyTaskInputEnvelope
}

input CommentCreateNestedOneWithoutChildrenInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutChildrenInput
  create: CommentCreateWithoutChildrenInput
}

input CommentCreateOrConnectWithoutChildrenInput {
  create: CommentCreateWithoutChildrenInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutOwnerInput {
  create: CommentCreateWithoutOwnerInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutParentInput {
  create: CommentCreateWithoutParentInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutTaskInput {
  create: CommentCreateWithoutTaskInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutChildrenInput {
  content: String!
  createdAt: DateTime
  id: String
  owner: UserCreateNestedOneWithoutCommentsInput
  parent: CommentCreateNestedOneWithoutChildrenInput
  targetType: TargetType
  task: TaskCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateWithoutOwnerInput {
  children: CommentCreateNestedManyWithoutParentInput
  content: String!
  createdAt: DateTime
  id: String
  parent: CommentCreateNestedOneWithoutChildrenInput
  targetType: TargetType
  task: TaskCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateWithoutParentInput {
  children: CommentCreateNestedManyWithoutParentInput
  content: String!
  createdAt: DateTime
  id: String
  owner: UserCreateNestedOneWithoutCommentsInput
  targetType: TargetType
  task: TaskCreateNestedOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateWithoutTaskInput {
  children: CommentCreateNestedManyWithoutParentInput
  content: String!
  createdAt: DateTime
  id: String
  owner: UserCreateNestedOneWithoutCommentsInput
  parent: CommentCreateNestedOneWithoutChildrenInput
  targetType: TargetType
  updatedAt: DateTime
}

type CommentGroupBy {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
  content: String!
  createdAt: DateTime!
  id: String!
  ownerId: String!
  parentId: String
  targetType: TargetType
  taskId: String!
  updatedAt: DateTime!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  content: String
  createdAt: DateTime
  id: String
  ownerId: String
  parentId: String
  targetType: TargetType
  taskId: String
  updatedAt: DateTime
}

input CommentMaxOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ownerId: SortOrder
  parentId: SortOrder
  targetType: SortOrder
  taskId: SortOrder
  updatedAt: SortOrder
}

type CommentMinAggregate {
  content: String
  createdAt: DateTime
  id: String
  ownerId: String
  parentId: String
  targetType: TargetType
  taskId: String
  updatedAt: DateTime
}

input CommentMinOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ownerId: SortOrder
  parentId: SortOrder
  targetType: SortOrder
  taskId: SortOrder
  updatedAt: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByWithAggregationInput {
  _count: CommentCountOrderByAggregateInput
  _max: CommentMaxOrderByAggregateInput
  _min: CommentMinOrderByAggregateInput
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ownerId: SortOrder
  parentId: SortOrder
  targetType: SortOrder
  taskId: SortOrder
  updatedAt: SortOrder
}

input CommentOrderByWithRelationInput {
  children: CommentOrderByRelationAggregateInput
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  owner: UserOrderByWithRelationInput
  ownerId: SortOrder
  parent: CommentOrderByWithRelationInput
  parentId: SortOrder
  targetType: SortOrder
  task: TaskOrderByWithRelationInput
  taskId: SortOrder
  updatedAt: SortOrder
}

input CommentRelationFilter {
  is: CommentWhereInput
  isNot: CommentWhereInput
}

enum CommentScalarFieldEnum {
  content
  createdAt
  id
  ownerId
  parentId
  targetType
  taskId
  updatedAt
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  ownerId: StringFilter
  parentId: StringNullableFilter
  targetType: EnumTargetTypeNullableFilter
  taskId: StringFilter
  updatedAt: DateTimeFilter
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput!]
  NOT: [CommentScalarWhereWithAggregatesInput!]
  OR: [CommentScalarWhereWithAggregatesInput!]
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  ownerId: StringWithAggregatesFilter
  parentId: StringNullableWithAggregatesFilter
  targetType: EnumTargetTypeNullableWithAggregatesFilter
  taskId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input CommentUpdateInput {
  children: CommentUpdateManyWithoutParentNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutChildrenNestedInput
  targetType: NullableEnumTargetTypeFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutCommentsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  targetType: NullableEnumTargetTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutOwnerInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutParentInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutTaskInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutOwnerNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutOwnerInput!]
  create: [CommentCreateWithoutOwnerInput!]
  createMany: CommentCreateManyOwnerInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutOwnerInput!]
}

input CommentUpdateManyWithoutParentNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentInput!]
  create: [CommentCreateWithoutParentInput!]
  createMany: CommentCreateManyParentInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutParentInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentInput!]
}

input CommentUpdateManyWithoutTaskNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutTaskInput!]
  create: [CommentCreateWithoutTaskInput!]
  createMany: CommentCreateManyTaskInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutTaskInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutTaskInput!]
}

input CommentUpdateOneWithoutChildrenNestedInput {
  connect: CommentWhereUniqueInput
  connectOrCreate: CommentCreateOrConnectWithoutChildrenInput
  create: CommentCreateWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  update: CommentUpdateWithoutChildrenInput
  upsert: CommentUpsertWithoutChildrenInput
}

input CommentUpdateWithWhereUniqueWithoutOwnerInput {
  data: CommentUpdateWithoutOwnerInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutParentInput {
  data: CommentUpdateWithoutParentInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutTaskInput {
  data: CommentUpdateWithoutTaskInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutChildrenInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutChildrenNestedInput
  targetType: NullableEnumTargetTypeFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutCommentsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutOwnerInput {
  children: CommentUpdateManyWithoutParentNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parent: CommentUpdateOneWithoutChildrenNestedInput
  targetType: NullableEnumTargetTypeFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutCommentsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutParentInput {
  children: CommentUpdateManyWithoutParentNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneWithoutCommentsNestedInput
  targetType: NullableEnumTargetTypeFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutCommentsNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutTaskInput {
  children: CommentUpdateManyWithoutParentNestedInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  owner: UserUpdateOneWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutChildrenNestedInput
  targetType: NullableEnumTargetTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutOwnerInput {
  create: CommentCreateWithoutOwnerInput!
  update: CommentUpdateWithoutOwnerInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutParentInput {
  create: CommentCreateWithoutParentInput!
  update: CommentUpdateWithoutParentInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutTaskInput {
  create: CommentCreateWithoutTaskInput!
  update: CommentUpdateWithoutTaskInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithoutChildrenInput {
  create: CommentCreateWithoutChildrenInput!
  update: CommentUpdateWithoutChildrenInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  children: CommentListRelationFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  owner: UserRelationFilter
  ownerId: StringFilter
  parent: CommentRelationFilter
  parentId: StringNullableFilter
  targetType: EnumTargetTypeNullableFilter
  task: TaskRelationFilter
  taskId: StringFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumNameNullableFilter {
  equals: Name
  in: [Name!]
  not: NestedEnumNameNullableFilter
  notIn: [Name!]
}

input EnumNameNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumNameNullableFilter
  _min: NestedEnumNameNullableFilter
  equals: Name
  in: [Name!]
  not: NestedEnumNameNullableWithAggregatesFilter
  notIn: [Name!]
}

input EnumStateFieldUpdateOperationsInput {
  set: State
}

input EnumStateFilter {
  equals: State
  in: [State!]
  not: NestedEnumStateFilter
  notIn: [State!]
}

input EnumStateWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumStateFilter
  _min: NestedEnumStateFilter
  equals: State
  in: [State!]
  not: NestedEnumStateWithAggregatesFilter
  notIn: [State!]
}

input EnumTargetTypeNullableFilter {
  equals: TargetType
  in: [TargetType!]
  not: NestedEnumTargetTypeNullableFilter
  notIn: [TargetType!]
}

input EnumTargetTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumTargetTypeNullableFilter
  _min: NestedEnumTargetTypeNullableFilter
  equals: TargetType
  in: [TargetType!]
  not: NestedEnumTargetTypeNullableWithAggregatesFilter
  notIn: [TargetType!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedJsonFilter
  _min: NestedJsonFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type Mutation {
  assigneeTask(taskId: String!, userId: String!): Assignee!
  createManyAction(data: [ActionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAssignee(data: [AssigneeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyComment(data: [CommentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyNotification(data: [NotificationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTask(data: [TaskCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAction(data: ActionCreateInput!): Action!
  createOneAssignee(data: AssigneeCreateInput!): Assignee!
  createOneComment(data: CommentCreateInput!): Comment!
  createOneNotification(data: NotificationCreateInput!): Notification!
  createOneTask(data: TaskCreateInput!): Task!
  createOneUser(data: UserCreateInput!): User!
  createTask(description: String!, email: String!, title: String!): Task!
  deleteManyAction(where: ActionWhereInput): AffectedRowsOutput!
  deleteManyAssignee(where: AssigneeWhereInput): AffectedRowsOutput!
  deleteManyComment(where: CommentWhereInput): AffectedRowsOutput!
  deleteManyNotification(where: NotificationWhereInput): AffectedRowsOutput!
  deleteManyTask(where: TaskWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneAction(where: ActionWhereUniqueInput!): Action
  deleteOneAssignee(where: AssigneeWhereUniqueInput!): Assignee
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneNotification(where: NotificationWhereUniqueInput!): Notification
  deleteOneTask(where: TaskWhereUniqueInput!): Task
  deleteOneUser(where: UserWhereUniqueInput!): User
  signIn(email: String!, password: String!): User!
  signUp(email: String!, name: String!, password_digest: String!): User!
  updateManyAction(data: ActionUpdateManyMutationInput!, where: ActionWhereInput): AffectedRowsOutput!
  updateManyAssignee(data: AssigneeUpdateManyMutationInput!, where: AssigneeWhereInput): AffectedRowsOutput!
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRowsOutput!
  updateManyNotification(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): AffectedRowsOutput!
  updateManyTask(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateOneAssignee(data: AssigneeUpdateInput!, where: AssigneeWhereUniqueInput!): Assignee
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOneNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneAction(create: ActionCreateInput!, update: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action!
  upsertOneAssignee(create: AssigneeCreateInput!, update: AssigneeUpdateInput!, where: AssigneeWhereUniqueInput!): Assignee!
  upsertOneComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertOneNotification(create: NotificationCreateInput!, update: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification!
  upsertOneTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

enum Name {
  ADD
  REMOVE
  UPDATE
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumNameNullableFilter {
  equals: Name
  in: [Name!]
  not: NestedEnumNameNullableFilter
  notIn: [Name!]
}

input NestedEnumNameNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumNameNullableFilter
  _min: NestedEnumNameNullableFilter
  equals: Name
  in: [Name!]
  not: NestedEnumNameNullableWithAggregatesFilter
  notIn: [Name!]
}

input NestedEnumStateFilter {
  equals: State
  in: [State!]
  not: NestedEnumStateFilter
  notIn: [State!]
}

input NestedEnumStateWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumStateFilter
  _min: NestedEnumStateFilter
  equals: State
  in: [State!]
  not: NestedEnumStateWithAggregatesFilter
  notIn: [State!]
}

input NestedEnumTargetTypeNullableFilter {
  equals: TargetType
  in: [TargetType!]
  not: NestedEnumTargetTypeNullableFilter
  notIn: [TargetType!]
}

input NestedEnumTargetTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumTargetTypeNullableFilter
  _min: NestedEnumTargetTypeNullableFilter
  equals: TargetType
  in: [TargetType!]
  not: NestedEnumTargetTypeNullableWithAggregatesFilter
  notIn: [TargetType!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedJsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Notification {
  actions: Action!
  actionsId: String!
  id: ID!
  readed_at: DateTime!
  user: User!
  userId: String!
}

type NotificationCountAggregate {
  _all: Int!
  actionsId: Int!
  id: Int!
  readed_at: Int!
  userId: Int!
}

input NotificationCountOrderByAggregateInput {
  actionsId: SortOrder
  id: SortOrder
  readed_at: SortOrder
  userId: SortOrder
}

input NotificationCreateInput {
  actions: ActionCreateNestedOneWithoutNotificationsInput!
  id: String
  readed_at: DateTime!
  user: UserCreateNestedOneWithoutNotificationsInput!
}

input NotificationCreateManyActionsInput {
  id: String
  readed_at: DateTime!
  userId: String!
}

input NotificationCreateManyActionsInputEnvelope {
  data: [NotificationCreateManyActionsInput!]!
  skipDuplicates: Boolean
}

input NotificationCreateManyInput {
  actionsId: String!
  id: String
  readed_at: DateTime!
  userId: String!
}

input NotificationCreateManyUserInput {
  actionsId: String!
  id: String
  readed_at: DateTime!
}

input NotificationCreateManyUserInputEnvelope {
  data: [NotificationCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input NotificationCreateNestedManyWithoutActionsInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutActionsInput!]
  create: [NotificationCreateWithoutActionsInput!]
  createMany: NotificationCreateManyActionsInputEnvelope
}

input NotificationCreateNestedManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
}

input NotificationCreateOrConnectWithoutActionsInput {
  create: NotificationCreateWithoutActionsInput!
  where: NotificationWhereUniqueInput!
}

input NotificationCreateOrConnectWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationCreateWithoutActionsInput {
  id: String
  readed_at: DateTime!
  user: UserCreateNestedOneWithoutNotificationsInput!
}

input NotificationCreateWithoutUserInput {
  actions: ActionCreateNestedOneWithoutNotificationsInput!
  id: String
  readed_at: DateTime!
}

type NotificationGroupBy {
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
  actionsId: String!
  id: String!
  readed_at: DateTime!
  userId: String!
}

input NotificationListRelationFilter {
  every: NotificationWhereInput
  none: NotificationWhereInput
  some: NotificationWhereInput
}

type NotificationMaxAggregate {
  actionsId: String
  id: String
  readed_at: DateTime
  userId: String
}

input NotificationMaxOrderByAggregateInput {
  actionsId: SortOrder
  id: SortOrder
  readed_at: SortOrder
  userId: SortOrder
}

type NotificationMinAggregate {
  actionsId: String
  id: String
  readed_at: DateTime
  userId: String
}

input NotificationMinOrderByAggregateInput {
  actionsId: SortOrder
  id: SortOrder
  readed_at: SortOrder
  userId: SortOrder
}

input NotificationOrderByRelationAggregateInput {
  _count: SortOrder
}

input NotificationOrderByWithAggregationInput {
  _count: NotificationCountOrderByAggregateInput
  _max: NotificationMaxOrderByAggregateInput
  _min: NotificationMinOrderByAggregateInput
  actionsId: SortOrder
  id: SortOrder
  readed_at: SortOrder
  userId: SortOrder
}

input NotificationOrderByWithRelationInput {
  actions: ActionOrderByWithRelationInput
  actionsId: SortOrder
  id: SortOrder
  readed_at: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum NotificationScalarFieldEnum {
  actionsId
  id
  readed_at
  userId
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  actionsId: StringFilter
  id: StringFilter
  readed_at: DateTimeFilter
  userId: StringFilter
}

input NotificationScalarWhereWithAggregatesInput {
  AND: [NotificationScalarWhereWithAggregatesInput!]
  NOT: [NotificationScalarWhereWithAggregatesInput!]
  OR: [NotificationScalarWhereWithAggregatesInput!]
  actionsId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  readed_at: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input NotificationUpdateInput {
  actions: ActionUpdateOneRequiredWithoutNotificationsNestedInput
  id: StringFieldUpdateOperationsInput
  readed_at: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutNotificationsNestedInput
}

input NotificationUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  readed_at: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateManyWithWhereWithoutActionsInput {
  data: NotificationUpdateManyMutationInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateManyWithWhereWithoutUserInput {
  data: NotificationUpdateManyMutationInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateManyWithoutActionsNestedInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutActionsInput!]
  create: [NotificationCreateWithoutActionsInput!]
  createMany: NotificationCreateManyActionsInputEnvelope
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutActionsInput!]
  updateMany: [NotificationUpdateManyWithWhereWithoutActionsInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutActionsInput!]
}

input NotificationUpdateManyWithoutUserNestedInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotificationUpdateManyWithWhereWithoutUserInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input NotificationUpdateWithWhereUniqueWithoutActionsInput {
  data: NotificationUpdateWithoutActionsInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  data: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithoutActionsInput {
  id: StringFieldUpdateOperationsInput
  readed_at: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutNotificationsNestedInput
}

input NotificationUpdateWithoutUserInput {
  actions: ActionUpdateOneRequiredWithoutNotificationsNestedInput
  id: StringFieldUpdateOperationsInput
  readed_at: DateTimeFieldUpdateOperationsInput
}

input NotificationUpsertWithWhereUniqueWithoutActionsInput {
  create: NotificationCreateWithoutActionsInput!
  update: NotificationUpdateWithoutActionsInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  update: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  actions: ActionRelationFilter
  actionsId: StringFilter
  id: StringFilter
  readed_at: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input NotificationWhereUniqueInput {
  id: String
}

input NullableEnumNameFieldUpdateOperationsInput {
  set: Name
}

input NullableEnumTargetTypeFieldUpdateOperationsInput {
  set: TargetType
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  action(where: ActionWhereUniqueInput!): Action
  actions(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): [Action!]!
  aggregateAction(cursor: ActionWhereUniqueInput, orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): AggregateAction!
  aggregateAssignee(cursor: AssigneeWhereUniqueInput, orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): AggregateAssignee!
  aggregateComment(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregateNotification(cursor: NotificationWhereUniqueInput, orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): AggregateNotification!
  aggregateTask(cursor: TaskWhereUniqueInput, orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): AggregateTask!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  assignee(where: AssigneeWhereUniqueInput!): Assignee
  assignees(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [Assignee!]!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  findFirstAction(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): Action
  findFirstActionOrThrow(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): Action
  findFirstAssignee(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): Assignee
  findFirstAssigneeOrThrow(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): Assignee
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstCommentOrThrow(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstNotification(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): Notification
  findFirstNotificationOrThrow(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): Notification
  findFirstTask(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstTaskOrThrow(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getAction(where: ActionWhereUniqueInput!): Action
  getAssignee(where: AssigneeWhereUniqueInput!): Assignee
  getComment(where: CommentWhereUniqueInput!): Comment
  getNotification(where: NotificationWhereUniqueInput!): Notification
  getTask(where: TaskWhereUniqueInput!): Task
  getUser(where: UserWhereUniqueInput!): User
  groupByAction(by: [ActionScalarFieldEnum!]!, having: ActionScalarWhereWithAggregatesInput, orderBy: [ActionOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionWhereInput): [ActionGroupBy!]!
  groupByAssignee(by: [AssigneeScalarFieldEnum!]!, having: AssigneeScalarWhereWithAggregatesInput, orderBy: [AssigneeOrderByWithAggregationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [AssigneeGroupBy!]!
  groupByComment(by: [CommentScalarFieldEnum!]!, having: CommentScalarWhereWithAggregatesInput, orderBy: [CommentOrderByWithAggregationInput!], skip: Int, take: Int, where: CommentWhereInput): [CommentGroupBy!]!
  groupByNotification(by: [NotificationScalarFieldEnum!]!, having: NotificationScalarWhereWithAggregatesInput, orderBy: [NotificationOrderByWithAggregationInput!], skip: Int, take: Int, where: NotificationWhereInput): [NotificationGroupBy!]!
  groupByTask(by: [TaskScalarFieldEnum!]!, having: TaskScalarWhereWithAggregatesInput, orderBy: [TaskOrderByWithAggregationInput!], skip: Int, take: Int, where: TaskWhereInput): [TaskGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

enum State {
  CREATED
  FINISHED
  PROGRESS
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

enum TargetType {
  TASK
}

type Task {
  _count: TaskCount
  actions(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): [Action!]!
  assignees(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [Assignee!]!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  createdAt: DateTime!
  date: DateTime!
  description: String
  id: ID!
  ownerId: User
  state: State!
  title: String!
  updatedAt: DateTime!
  userId: String!
}

type TaskCount {
  actions: Int!
  assignees: Int!
  comments: Int!
}

type TaskCountAggregate {
  _all: Int!
  createdAt: Int!
  date: Int!
  description: Int!
  id: Int!
  state: Int!
  title: Int!
  updatedAt: Int!
  userId: Int!
}

input TaskCountOrderByAggregateInput {
  createdAt: SortOrder
  date: SortOrder
  description: SortOrder
  id: SortOrder
  state: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskCreateInput {
  actions: ActionCreateNestedManyWithoutTaskInput
  assignees: AssigneeCreateNestedManyWithoutTaskInput
  comments: CommentCreateNestedManyWithoutTaskInput
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  ownerId: UserCreateNestedOneWithoutTasksInput
  state: State
  title: String!
  updatedAt: DateTime
}

input TaskCreateManyInput {
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  state: State
  title: String!
  updatedAt: DateTime
  userId: String!
}

input TaskCreateManyOwnerIdInput {
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  state: State
  title: String!
  updatedAt: DateTime
}

input TaskCreateManyOwnerIdInputEnvelope {
  data: [TaskCreateManyOwnerIdInput!]!
  skipDuplicates: Boolean
}

input TaskCreateNestedManyWithoutOwnerIdInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutOwnerIdInput!]
  create: [TaskCreateWithoutOwnerIdInput!]
  createMany: TaskCreateManyOwnerIdInputEnvelope
}

input TaskCreateNestedOneWithoutActionsInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutActionsInput
  create: TaskCreateWithoutActionsInput
}

input TaskCreateNestedOneWithoutAssigneesInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutAssigneesInput
  create: TaskCreateWithoutAssigneesInput
}

input TaskCreateNestedOneWithoutCommentsInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutCommentsInput
  create: TaskCreateWithoutCommentsInput
}

input TaskCreateOrConnectWithoutActionsInput {
  create: TaskCreateWithoutActionsInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutAssigneesInput {
  create: TaskCreateWithoutAssigneesInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutCommentsInput {
  create: TaskCreateWithoutCommentsInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutOwnerIdInput {
  create: TaskCreateWithoutOwnerIdInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutActionsInput {
  assignees: AssigneeCreateNestedManyWithoutTaskInput
  comments: CommentCreateNestedManyWithoutTaskInput
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  ownerId: UserCreateNestedOneWithoutTasksInput
  state: State
  title: String!
  updatedAt: DateTime
}

input TaskCreateWithoutAssigneesInput {
  actions: ActionCreateNestedManyWithoutTaskInput
  comments: CommentCreateNestedManyWithoutTaskInput
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  ownerId: UserCreateNestedOneWithoutTasksInput
  state: State
  title: String!
  updatedAt: DateTime
}

input TaskCreateWithoutCommentsInput {
  actions: ActionCreateNestedManyWithoutTaskInput
  assignees: AssigneeCreateNestedManyWithoutTaskInput
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  ownerId: UserCreateNestedOneWithoutTasksInput
  state: State
  title: String!
  updatedAt: DateTime
}

input TaskCreateWithoutOwnerIdInput {
  actions: ActionCreateNestedManyWithoutTaskInput
  assignees: AssigneeCreateNestedManyWithoutTaskInput
  comments: CommentCreateNestedManyWithoutTaskInput
  createdAt: DateTime
  date: DateTime!
  description: String
  id: String
  state: State
  title: String!
  updatedAt: DateTime
}

type TaskGroupBy {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
  createdAt: DateTime!
  date: DateTime!
  description: String
  id: String!
  state: State!
  title: String!
  updatedAt: DateTime!
  userId: String!
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

type TaskMaxAggregate {
  createdAt: DateTime
  date: DateTime
  description: String
  id: String
  state: State
  title: String
  updatedAt: DateTime
  userId: String
}

input TaskMaxOrderByAggregateInput {
  createdAt: SortOrder
  date: SortOrder
  description: SortOrder
  id: SortOrder
  state: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type TaskMinAggregate {
  createdAt: DateTime
  date: DateTime
  description: String
  id: String
  state: State
  title: String
  updatedAt: DateTime
  userId: String
}

input TaskMinOrderByAggregateInput {
  createdAt: SortOrder
  date: SortOrder
  description: SortOrder
  id: SortOrder
  state: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input TaskOrderByWithAggregationInput {
  _count: TaskCountOrderByAggregateInput
  _max: TaskMaxOrderByAggregateInput
  _min: TaskMinOrderByAggregateInput
  createdAt: SortOrder
  date: SortOrder
  description: SortOrder
  id: SortOrder
  state: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskOrderByWithRelationInput {
  actions: ActionOrderByRelationAggregateInput
  assignees: AssigneeOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  createdAt: SortOrder
  date: SortOrder
  description: SortOrder
  id: SortOrder
  ownerId: UserOrderByWithRelationInput
  state: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskRelationFilter {
  is: TaskWhereInput
  isNot: TaskWhereInput
}

enum TaskScalarFieldEnum {
  createdAt
  date
  description
  id
  state
  title
  updatedAt
  userId
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  createdAt: DateTimeFilter
  date: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  state: EnumStateFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input TaskScalarWhereWithAggregatesInput {
  AND: [TaskScalarWhereWithAggregatesInput!]
  NOT: [TaskScalarWhereWithAggregatesInput!]
  OR: [TaskScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  state: EnumStateWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input TaskUpdateInput {
  actions: ActionUpdateManyWithoutTaskNestedInput
  assignees: AssigneeUpdateManyWithoutTaskNestedInput
  comments: CommentUpdateManyWithoutTaskNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ownerId: UserUpdateOneWithoutTasksNestedInput
  state: EnumStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: EnumStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutOwnerIdInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutOwnerIdNestedInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutOwnerIdInput!]
  create: [TaskCreateWithoutOwnerIdInput!]
  createMany: TaskCreateManyOwnerIdInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutOwnerIdInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutOwnerIdInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutOwnerIdInput!]
}

input TaskUpdateOneRequiredWithoutActionsNestedInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutActionsInput
  create: TaskCreateWithoutActionsInput
  update: TaskUpdateWithoutActionsInput
  upsert: TaskUpsertWithoutActionsInput
}

input TaskUpdateOneRequiredWithoutAssigneesNestedInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutAssigneesInput
  create: TaskCreateWithoutAssigneesInput
  update: TaskUpdateWithoutAssigneesInput
  upsert: TaskUpsertWithoutAssigneesInput
}

input TaskUpdateOneRequiredWithoutCommentsNestedInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutCommentsInput
  create: TaskCreateWithoutCommentsInput
  update: TaskUpdateWithoutCommentsInput
  upsert: TaskUpsertWithoutCommentsInput
}

input TaskUpdateWithWhereUniqueWithoutOwnerIdInput {
  data: TaskUpdateWithoutOwnerIdInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutActionsInput {
  assignees: AssigneeUpdateManyWithoutTaskNestedInput
  comments: CommentUpdateManyWithoutTaskNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ownerId: UserUpdateOneWithoutTasksNestedInput
  state: EnumStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateWithoutAssigneesInput {
  actions: ActionUpdateManyWithoutTaskNestedInput
  comments: CommentUpdateManyWithoutTaskNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ownerId: UserUpdateOneWithoutTasksNestedInput
  state: EnumStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateWithoutCommentsInput {
  actions: ActionUpdateManyWithoutTaskNestedInput
  assignees: AssigneeUpdateManyWithoutTaskNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ownerId: UserUpdateOneWithoutTasksNestedInput
  state: EnumStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateWithoutOwnerIdInput {
  actions: ActionUpdateManyWithoutTaskNestedInput
  assignees: AssigneeUpdateManyWithoutTaskNestedInput
  comments: CommentUpdateManyWithoutTaskNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: EnumStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpsertWithWhereUniqueWithoutOwnerIdInput {
  create: TaskCreateWithoutOwnerIdInput!
  update: TaskUpdateWithoutOwnerIdInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithoutActionsInput {
  create: TaskCreateWithoutActionsInput!
  update: TaskUpdateWithoutActionsInput!
}

input TaskUpsertWithoutAssigneesInput {
  create: TaskCreateWithoutAssigneesInput!
  update: TaskUpdateWithoutAssigneesInput!
}

input TaskUpsertWithoutCommentsInput {
  create: TaskCreateWithoutCommentsInput!
  update: TaskUpdateWithoutCommentsInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  actions: ActionListRelationFilter
  assignees: AssigneeListRelationFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  date: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  ownerId: UserRelationFilter
  state: EnumStateFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input TaskWhereUniqueInput {
  id: String
}

type User {
  _count: UserCount
  active: Boolean!
  assignees(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [Assignee!]!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  createdAt: DateTime!
  email: String!
  id: ID!
  last_sign_in_at: DateTime!
  name: String!
  notifications(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  password_digest: String!
  preferences: JSON!
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  updatedAt: DateTime!
}

type UserCount {
  assignees: Int!
  comments: Int!
  notifications: Int!
  tasks: Int!
}

type UserCountAggregate {
  _all: Int!
  active: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  last_sign_in_at: Int!
  name: Int!
  password_digest: Int!
  preferences: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  active: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  password_digest: SortOrder
  preferences: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  active: Boolean!
  assignees: AssigneeCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  notifications: NotificationCreateNestedManyWithoutUserInput
  password_digest: String!
  preferences: JSON!
  tasks: TaskCreateNestedManyWithoutOwnerIdInput
  updatedAt: DateTime
}

input UserCreateManyInput {
  active: Boolean!
  createdAt: DateTime
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  password_digest: String!
  preferences: JSON!
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutAssigneesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAssigneesInput
  create: UserCreateWithoutAssigneesInput
}

input UserCreateNestedOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateNestedOneWithoutNotificationsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotificationsInput
  create: UserCreateWithoutNotificationsInput
}

input UserCreateNestedOneWithoutTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
}

input UserCreateOrConnectWithoutAssigneesInput {
  create: UserCreateWithoutAssigneesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAssigneesInput {
  active: Boolean!
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  notifications: NotificationCreateNestedManyWithoutUserInput
  password_digest: String!
  preferences: JSON!
  tasks: TaskCreateNestedManyWithoutOwnerIdInput
  updatedAt: DateTime
}

input UserCreateWithoutCommentsInput {
  active: Boolean!
  assignees: AssigneeCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  notifications: NotificationCreateNestedManyWithoutUserInput
  password_digest: String!
  preferences: JSON!
  tasks: TaskCreateNestedManyWithoutOwnerIdInput
  updatedAt: DateTime
}

input UserCreateWithoutNotificationsInput {
  active: Boolean!
  assignees: AssigneeCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  password_digest: String!
  preferences: JSON!
  tasks: TaskCreateNestedManyWithoutOwnerIdInput
  updatedAt: DateTime
}

input UserCreateWithoutTasksInput {
  active: Boolean!
  assignees: AssigneeCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String!
  id: String
  last_sign_in_at: DateTime!
  name: String!
  notifications: NotificationCreateNestedManyWithoutUserInput
  password_digest: String!
  preferences: JSON!
  updatedAt: DateTime
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  active: Boolean!
  createdAt: DateTime!
  email: String!
  id: String!
  last_sign_in_at: DateTime!
  name: String!
  password_digest: String!
  preferences: JSON!
  updatedAt: DateTime!
}

type UserMaxAggregate {
  active: Boolean
  createdAt: DateTime
  email: String
  id: String
  last_sign_in_at: DateTime
  name: String
  password_digest: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  active: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  password_digest: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  active: Boolean
  createdAt: DateTime
  email: String
  id: String
  last_sign_in_at: DateTime
  name: String
  password_digest: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  active: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  password_digest: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  active: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  password_digest: SortOrder
  preferences: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  active: SortOrder
  assignees: AssigneeOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  last_sign_in_at: SortOrder
  name: SortOrder
  notifications: NotificationOrderByRelationAggregateInput
  password_digest: SortOrder
  preferences: SortOrder
  tasks: TaskOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  active
  createdAt
  email
  id
  last_sign_in_at
  name
  password_digest
  preferences
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  active: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  last_sign_in_at: DateTimeWithAggregatesFilter
  name: StringWithAggregatesFilter
  password_digest: StringWithAggregatesFilter
  preferences: JsonWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input UserUpdateInput {
  active: BoolFieldUpdateOperationsInput
  assignees: AssigneeUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutOwnerNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  password_digest: StringFieldUpdateOperationsInput
  preferences: JSON
  tasks: TaskUpdateManyWithoutOwnerIdNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password_digest: StringFieldUpdateOperationsInput
  preferences: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAssigneesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAssigneesInput
  create: UserCreateWithoutAssigneesInput
  update: UserUpdateWithoutAssigneesInput
  upsert: UserUpsertWithoutAssigneesInput
}

input UserUpdateOneRequiredWithoutNotificationsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotificationsInput
  create: UserCreateWithoutNotificationsInput
  update: UserUpdateWithoutNotificationsInput
  upsert: UserUpsertWithoutNotificationsInput
}

input UserUpdateOneWithoutCommentsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  create: UserCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutTasksNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTasksInput
  create: UserCreateWithoutTasksInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutTasksInput
  upsert: UserUpsertWithoutTasksInput
}

input UserUpdateWithoutAssigneesInput {
  active: BoolFieldUpdateOperationsInput
  comments: CommentUpdateManyWithoutOwnerNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  password_digest: StringFieldUpdateOperationsInput
  preferences: JSON
  tasks: TaskUpdateManyWithoutOwnerIdNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentsInput {
  active: BoolFieldUpdateOperationsInput
  assignees: AssigneeUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  password_digest: StringFieldUpdateOperationsInput
  preferences: JSON
  tasks: TaskUpdateManyWithoutOwnerIdNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutNotificationsInput {
  active: BoolFieldUpdateOperationsInput
  assignees: AssigneeUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutOwnerNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password_digest: StringFieldUpdateOperationsInput
  preferences: JSON
  tasks: TaskUpdateManyWithoutOwnerIdNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutTasksInput {
  active: BoolFieldUpdateOperationsInput
  assignees: AssigneeUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutOwnerNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  last_sign_in_at: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  notifications: NotificationUpdateManyWithoutUserNestedInput
  password_digest: StringFieldUpdateOperationsInput
  preferences: JSON
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutAssigneesInput {
  create: UserCreateWithoutAssigneesInput!
  update: UserUpdateWithoutAssigneesInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsInput!
}

input UserUpsertWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput!
  update: UserUpdateWithoutNotificationsInput!
}

input UserUpsertWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  update: UserUpdateWithoutTasksInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  active: BoolFilter
  assignees: AssigneeListRelationFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  last_sign_in_at: DateTimeFilter
  name: StringFilter
  notifications: NotificationListRelationFilter
  password_digest: StringFilter
  preferences: JsonFilter
  tasks: TaskListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}