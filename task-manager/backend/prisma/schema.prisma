datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator typegraphql {
    provider        = "typegraphql-prisma"
    output          = "../prisma/generated/type-graphql"
    emitIdAsIDType  = true
    simpleResolvers = true
}

model User {
    id              String         @id @unique @default(cuid())
    name            String
    password_digest String
    active          Boolean
    preferences     Json
    email           String         @unique
    last_sign_in_at DateTime
    tasks           Task[]
    comments        Comment[]
    notifications   Notification[]

    createdAt DateTime   @default(now()) @map(name: "created_at")
    updatedAt DateTime   @updatedAt @map(name: "updated_at")
    assignees Assignee[]

    @@index([id, email])
}

model Task {
    id          String     @id @unique @default(uuid())
    title       String
    description String?
    ownerId     User       @relation(fields: [userId], references: [id])
    date        DateTime
    state       State      @default(CREATED)
    userId      String
    comments    Comment[]
    actions     Action[]
    createdAt   DateTime   @default(now()) @map(name: "created_at")
    updatedAt   DateTime   @updatedAt @map(name: "updated_at")
    assignees   Assignee[]
}

model Comment {
    id         String      @id @unique @default(uuid())
    owner      User?       @relation(fields: [ownerId], references: [id])
    ownerId    String
    task       Task        @relation(fields: [taskId], references: [id])
    taskId     String
    targetType TargetType?
    children   Comment[]   @relation("children")
    parent     Comment?    @relation("children", fields: [parentId], references: [id])
    parentId   String?     @map("commentId")
    content    String
    createdAt  DateTime    @default(now()) @map(name: "created_at")
    updatedAt  DateTime    @updatedAt @map(name: "updated_at")
}

model Action {
    id            String         @id @unique @default(uuid())
    name          Name?
    task          Task           @relation(fields: [targetId], references: [id])
    targetType    TargetType?
    targetId      String
    notifications Notification[]
}

model Notification {
    id        String   @id @unique @default(uuid())
    user      User     @relation(fields: [userId], references: [id])
    actions   Action   @relation(fields: [actionsId], references: [id])
    readed_at DateTime
    userId    String
    actionsId String
}

model Assignee {
    id     String @id @unique @default(uuid())
    user   User   @relation(fields: [userId], references: [id])
    task   Task   @relation(fields: [taskId], references: [id])
    taskId String
    userId String

    @@index([taskId, userId])
}

enum State {
    CREATED
    PROGRESS
    FINISHED
}

enum TargetType {
    TASK
}

enum Name {
    ADD
    UPDATE
    REMOVE
}
